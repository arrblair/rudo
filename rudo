#!/usr/local/bin/ruby
require 'rubygems'
require 'dm-core'
require 'dm-migrations'

#DataMapper::Logger.new($stdout, :debug)
DataMapper.setup(:default, 'sqlite://' + File.expand_path('~/todo.db'))

class Task
  include DataMapper::Resource
  property :id,         Serial
  property :title,      String

  def initialize(title)
    self.title = title
  end

  def to_s
    self.title
  end
end

DataMapper.auto_upgrade!
DataMapper.finalize

def print_tasks
  puts '*' * 40
  Task.all.each_with_index do |task, index|
    break if index >= 10
    puts (index+1).to_s + '. ' + task.to_s
  end
  puts '*' * 40
end

# check which arguments are passed in, if any
case ARGV[0]
when 'add'
  # if the user types "rudo add" without a task to add, raise an error
  raise 'you need to give me a task to add' unless ARGV[1]
  # if the user types in a task that is already in the list, raise an error
  raise 'task already exists' if Task.first(:title => ARGV[1])

  # otherwise add the task the user typed, e.g.:
  # rudo add 'do some task'
  Task.new(ARGV[1]).save

when 'done'
  # if the list is empty then there's nothing to remove, throw an error
  raise "there's nothing on your list" if Task.all.empty?

  # if the user types "done 'whatever'"
  if ARGV[1]
    # see if the user types an integer, e.g.:
    # rudo done 5
    begin
      Task.all[Integer(ARGV[1])-1].destroy

    rescue
      # otherwise see if the user typed in the name of a task
      # rudo done 'do some task'
      if Task.first(:title => ARGV[1])
        Task.first(:title => ARGV[1]).destroy

      # finally raise an error if the last argument doesn't make sense
      else
        raise "'done' should be followed by either the number or title of a task"

      end

    end

  else
    # if there was no second argument then just remove the first item from the list
    # rudo done
    Task.first.destroy

  end

# walk cycles the ordering of the list, moving the first item to the end
# the user can follow it with an integer to step through a number of times
when 'walk'
  a = 1
  if ARGV[1]
    begin
      a = Integer(ARGV[1])
    rescue
      raise 'walk should be followed by an integer'
    end
  end

  # step through as many times as the user specified, default 1
  a.times do
    Task.new(Task.first.to_s).save
    Task.first.destroy
  end

when nil
  # if the user types 'rudo' alone just print the list
else
  raise 'invalid argument, try add, walk or done'
end

print_tasks
